#!/usr/bin/env python

"""
This module demonstrates the simulation of a chirp frequency trace with an 
optional undershoot at the end. 
"""


import matplotlib.pyplot as plt
import numpy as np


def gaussian(chirp_t, mu, width, kurt):
    chirp_sig = 0.5 * width / (2.0 * np.log(10.0)) ** (0.5 / kurt)
    gauss = np.exp(-0.5 * (((chirp_t - mu) / chirp_sig) ** 2.0) ** kurt)
    return gauss


def chirps(
    eodf=500,
    samplerate=44100.0,
    duration=1.0,
    chirp_times=[0.5],
    chirp_size=[100.0],
    chirp_width=[0.01],
    chirp_undershoot=[0.3],
    chirp_kurtosis=[1.0],
    chirp_contrast=[0.05],
):
    """Simulate frequency trace with chirps.

    A chirp is modeled as a Gaussian frequency modulation.
    The first chirp is placed at 0.5/chirp_freq.

    Parameters
    ----------
    eodf: float
        EOD frequency of the fish in Hertz.
    samplerate: float
        Sampling rate in Hertz.
    duration: float
        Duration of the generated data in seconds.
    chirp_times: float
        Timestamps of every single chirp in seconds.
    chirp_size: list
        Size of each chirp (maximum frequency increase above eodf) in Hertz.
    chirp_width: list
        Width of every single chirp at 10% height in seconds.
    chirp_kurtosis: list:
        Shape of every single chirp. =1: Gaussian, >1: more rectangular, <1: more peaked.
    chirp_contrast: float
        Maximum amplitude reduction of EOD during every respective chirp.

    Returns
    -------
    frequency: array of floats
        Generated frequency trace that can be passed on to wavefish_eods().
    amplitude: array of floats
        Generated amplitude modulation that can be used to multiply the trace generated by
        wavefish_eods().
    """
    # baseline eod frequency and amplitude modulation:
    n = len(np.arange(0, duration, 1.0 / samplerate))
    frequency = eodf * np.ones(n)
    am = np.ones(n)

    for time, width, undershoot, size, kurtosis, contrast in zip(
        chirp_times,
        chirp_width,
        chirp_undershoot,
        chirp_size,
        chirp_kurtosis,
        chirp_contrast,
    ):
        # chirp frequency waveform:
        chirp_t = np.arange(-3.0 * width, 3.0 * width, 1.0 / samplerate)
        g1 = gaussian(chirp_t, mu=0, width=width, kurt=kurtosis)
        g2 = gaussian(chirp_t, mu=width / 2, width=width, kurt=1)
        gauss = g1 * size - g2 * size * undershoot

        # add chirps on baseline eodf:
        index = int(time * samplerate)
        i0 = index - len(gauss) // 2
        i1 = i0 + len(gauss)
        gi0 = 0
        gi1 = len(gauss)
        if i0 < 0:
            gi0 -= i0
            i0 = 0
        if i1 >= len(frequency):
            gi1 -= i1 - len(frequency)
            i1 = len(frequency)
        frequency[i0:i1] += gauss[gi0:gi1]
        am[i0:i1] -= contrast * gauss[gi0:gi1] / size

    return frequency, am


def main():
    chirp, amp = chirps(duration=0.1, chirp_times=[0.05])
    fig, ax = plt.subplots(1, 2, sharex=True)

    ax[0].plot(chirp)
    ax[0].set_title("Frequency trace")
    ax[1].plot(amp)
    ax[1].set_title("Amplitude modulation")
    plt.show()


if __name__ == "__main__":
    main()
